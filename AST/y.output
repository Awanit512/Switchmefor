Terminals unused in grammar

   SIZEOF
   INC_OP
   DEC_OP
   CONTINUE
   FLOAT


Grammar

    0 $accept: program $end

    1 var: IDENTIFIER
    2    | IDENTIFIER '[' CONSTANT ']'
    3    | IDENTIFIER '[' CONSTANT ']' '[' CONSTANT ']'

    4 variables: var
    5          | variables ',' var

    6 type: INT
    7     | CHAR
    8     | VOID

    9 declaration: type variables ';'

   10 print: PRINT '(' type ',' IDENTIFIER ')'

   11 myfunction: print ';'

   12 statement: body
   13          | jump_statement
   14          | iteration_statement
   15          | expression_statement
   16          | declaration
   17          | myfunction

   18 istart: '{'

   19 iend: '}'

   20 iteration_statement: FOR '(' expression_statement expression_statement ')' istart statement_list iend
   21                    | FOR '(' expression_statement expression_statement expression ')' istart statement_list iend

   22 jump_statement: BREAK ';'
   23               | RETURN ';'
   24               | RETURN expression ';'

   25 ass_operator: '='

   26 expression_statement: ';'
   27                     | expression ';'

   28 arg_list: expression
   29         | arg_list ',' expression

   30 starting: IDENTIFIER
   31         | CONSTANT
   32         | STRING_LITERAL
   33         | '(' expression ')'

   34 main_exp: starting
   35         | IDENTIFIER '[' expression ']'
   36         | IDENTIFIER '[' expression ']' '[' expression ']'
   37         | IDENTIFIER '(' ')'
   38         | IDENTIFIER '(' arg_list ')'

   39 unary_op: '+'
   40         | '-'
   41         | '!'
   42         | '*'
   43         | '&'

   44 unary_exp: main_exp
   45          | unary_op unary_exp

   46 mul_div_mod: unary_exp
   47            | mul_div_mod '*' unary_exp
   48            | mul_div_mod '/' unary_exp
   49            | mul_div_mod '%' unary_exp

   50 plus_minus: mul_div_mod
   51           | plus_minus '+' mul_div_mod
   52           | plus_minus '-' mul_div_mod

   53 lt_gt_lte_gte: plus_minus
   54              | lt_gt_lte_gte '<' plus_minus
   55              | lt_gt_lte_gte '>' plus_minus
   56              | lt_gt_lte_gte LE_OP plus_minus
   57              | lt_gt_lte_gte GE_OP plus_minus

   58 eq_neq: lt_gt_lte_gte
   59       | eq_neq EQ_OP lt_gt_lte_gte
   60       | eq_neq NE_OP lt_gt_lte_gte

   61 and: eq_neq
   62    | and '&' eq_neq

   63 or: and
   64   | or '|' and

   65 andand: or
   66       | andand AND_OP or

   67 oror: andand
   68     | oror OR_OP andand

   69 conditional_exp: oror

   70 expression: conditional_exp
   71           | unary_exp ass_operator expression

   72 statement_list: statement
   73               | statement_list statement

   74 openB: '{'

   75 closeB: '}'

   76 body: openB statement_list closeB

   77 function_name: type IDENTIFIER

   78 function: function_name '(' ')' body

   79 program: declaration
   80        | function
   81        | program declaration
   82        | program function


Terminals, with rules where they appear

$end (0) 0
'!' (33) 41
'%' (37) 49
'&' (38) 43 62
'(' (40) 10 20 21 33 37 38 78
')' (41) 10 20 21 33 37 38 78
'*' (42) 42 47
'+' (43) 39 51
',' (44) 5 10 29
'-' (45) 40 52
'/' (47) 48
';' (59) 9 11 22 23 24 26 27
'<' (60) 54
'=' (61) 25
'>' (62) 55
'[' (91) 2 3 35 36
']' (93) 2 3 35 36
'{' (123) 18 74
'|' (124) 64
'}' (125) 19 75
error (256)
IDENTIFIER (258) 1 2 3 10 30 35 36 37 38 77
CONSTANT (259) 2 3 31
STRING_LITERAL (260) 32
SIZEOF (261)
INC_OP (262)
DEC_OP (263)
LE_OP (264) 56
GE_OP (265) 57
EQ_OP (266) 59
NE_OP (267) 60
AND_OP (268) 66
OR_OP (269) 68
FOR (270) 20 21
CONTINUE (271)
BREAK (272) 22
RETURN (273) 23 24
PRINT (274) 10
CHAR (275) 7
INT (276) 6
FLOAT (277)
VOID (278) 8


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
var (44)
    on left: 1 2 3, on right: 4 5
variables (45)
    on left: 4 5, on right: 5 9
type (46)
    on left: 6 7 8, on right: 9 10 77
declaration (47)
    on left: 9, on right: 16 79 81
print (48)
    on left: 10, on right: 11
myfunction (49)
    on left: 11, on right: 17
statement (50)
    on left: 12 13 14 15 16 17, on right: 72 73
istart (51)
    on left: 18, on right: 20 21
iend (52)
    on left: 19, on right: 20 21
iteration_statement (53)
    on left: 20 21, on right: 14
jump_statement (54)
    on left: 22 23 24, on right: 13
ass_operator (55)
    on left: 25, on right: 71
expression_statement (56)
    on left: 26 27, on right: 15 20 21
arg_list (57)
    on left: 28 29, on right: 29 38
starting (58)
    on left: 30 31 32 33, on right: 34
main_exp (59)
    on left: 34 35 36 37 38, on right: 44
unary_op (60)
    on left: 39 40 41 42 43, on right: 45
unary_exp (61)
    on left: 44 45, on right: 45 46 47 48 49 71
mul_div_mod (62)
    on left: 46 47 48 49, on right: 47 48 49 50 51 52
plus_minus (63)
    on left: 50 51 52, on right: 51 52 53 54 55 56 57
lt_gt_lte_gte (64)
    on left: 53 54 55 56 57, on right: 54 55 56 57 58 59 60
eq_neq (65)
    on left: 58 59 60, on right: 59 60 61 62
and (66)
    on left: 61 62, on right: 62 63 64
or (67)
    on left: 63 64, on right: 64 65 66
andand (68)
    on left: 65 66, on right: 66 67 68
oror (69)
    on left: 67 68, on right: 68 69
conditional_exp (70)
    on left: 69, on right: 70
expression (71)
    on left: 70 71, on right: 21 24 27 28 29 33 35 36 71
statement_list (72)
    on left: 72 73, on right: 20 21 73 76
openB (73)
    on left: 74, on right: 76
closeB (74)
    on left: 75, on right: 76
body (75)
    on left: 76, on right: 12 78
function_name (76)
    on left: 77, on right: 78
function (77)
    on left: 78, on right: 80 82
program (78)
    on left: 79 80 81 82, on right: 0 81 82


State 0

    0 $accept: . program $end

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    type           go to state 4
    declaration    go to state 5
    function_name  go to state 6
    function       go to state 7
    program        go to state 8


State 1

    7 type: CHAR .

    $default  reduce using rule 7 (type)


State 2

    6 type: INT .

    $default  reduce using rule 6 (type)


State 3

    8 type: VOID .

    $default  reduce using rule 8 (type)


State 4

    9 declaration: type . variables ';'
   77 function_name: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 9

    var        go to state 10
    variables  go to state 11


State 5

   79 program: declaration .

    $default  reduce using rule 79 (program)


State 6

   78 function: function_name . '(' ')' body

    '('  shift, and go to state 12


State 7

   80 program: function .

    $default  reduce using rule 80 (program)


State 8

    0 $accept: program . $end
   81 program: program . declaration
   82        | program . function

    $end  shift, and go to state 13
    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    type           go to state 4
    declaration    go to state 14
    function_name  go to state 6
    function       go to state 15


State 9

    1 var: IDENTIFIER .
    2    | IDENTIFIER . '[' CONSTANT ']'
    3    | IDENTIFIER . '[' CONSTANT ']' '[' CONSTANT ']'
   77 function_name: type IDENTIFIER .

    '['  shift, and go to state 16

    '('       reduce using rule 77 (function_name)
    $default  reduce using rule 1 (var)


State 10

    4 variables: var .

    $default  reduce using rule 4 (variables)


State 11

    5 variables: variables . ',' var
    9 declaration: type variables . ';'

    ','  shift, and go to state 17
    ';'  shift, and go to state 18


State 12

   78 function: function_name '(' . ')' body

    ')'  shift, and go to state 19


State 13

    0 $accept: program $end .

    $default  accept


State 14

   81 program: program declaration .

    $default  reduce using rule 81 (program)


State 15

   82 program: program function .

    $default  reduce using rule 82 (program)


State 16

    2 var: IDENTIFIER '[' . CONSTANT ']'
    3    | IDENTIFIER '[' . CONSTANT ']' '[' CONSTANT ']'

    CONSTANT  shift, and go to state 20


State 17

    5 variables: variables ',' . var

    IDENTIFIER  shift, and go to state 21

    var  go to state 22


State 18

    9 declaration: type variables ';' .

    $default  reduce using rule 9 (declaration)


State 19

   78 function: function_name '(' ')' . body

    '{'  shift, and go to state 23

    openB  go to state 24
    body   go to state 25


State 20

    2 var: IDENTIFIER '[' CONSTANT . ']'
    3    | IDENTIFIER '[' CONSTANT . ']' '[' CONSTANT ']'

    ']'  shift, and go to state 26


State 21

    1 var: IDENTIFIER .
    2    | IDENTIFIER . '[' CONSTANT ']'
    3    | IDENTIFIER . '[' CONSTANT ']' '[' CONSTANT ']'

    '['  shift, and go to state 16

    $default  reduce using rule 1 (var)


State 22

    5 variables: variables ',' var .

    $default  reduce using rule 5 (variables)


State 23

   74 openB: '{' .

    $default  reduce using rule 74 (openB)


State 24

   76 body: openB . statement_list closeB

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    FOR             shift, and go to state 30
    BREAK           shift, and go to state 31
    RETURN          shift, and go to state 32
    PRINT           shift, and go to state 33
    CHAR            shift, and go to state 1
    INT             shift, and go to state 2
    VOID            shift, and go to state 3
    ';'             shift, and go to state 34
    '('             shift, and go to state 35
    '{'             shift, and go to state 23
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    type                  go to state 41
    declaration           go to state 42
    print                 go to state 43
    myfunction            go to state 44
    statement             go to state 45
    iteration_statement   go to state 46
    jump_statement        go to state 47
    expression_statement  go to state 48
    starting              go to state 49
    main_exp              go to state 50
    unary_op              go to state 51
    unary_exp             go to state 52
    mul_div_mod           go to state 53
    plus_minus            go to state 54
    lt_gt_lte_gte         go to state 55
    eq_neq                go to state 56
    and                   go to state 57
    or                    go to state 58
    andand                go to state 59
    oror                  go to state 60
    conditional_exp       go to state 61
    expression            go to state 62
    statement_list        go to state 63
    openB                 go to state 24
    body                  go to state 64


State 25

   78 function: function_name '(' ')' body .

    $default  reduce using rule 78 (function)


State 26

    2 var: IDENTIFIER '[' CONSTANT ']' .
    3    | IDENTIFIER '[' CONSTANT ']' . '[' CONSTANT ']'

    '['  shift, and go to state 65

    $default  reduce using rule 2 (var)


State 27

   30 starting: IDENTIFIER .
   35 main_exp: IDENTIFIER . '[' expression ']'
   36         | IDENTIFIER . '[' expression ']' '[' expression ']'
   37         | IDENTIFIER . '(' ')'
   38         | IDENTIFIER . '(' arg_list ')'

    '['  shift, and go to state 66
    '('  shift, and go to state 67

    $default  reduce using rule 30 (starting)


State 28

   31 starting: CONSTANT .

    $default  reduce using rule 31 (starting)


State 29

   32 starting: STRING_LITERAL .

    $default  reduce using rule 32 (starting)


State 30

   20 iteration_statement: FOR . '(' expression_statement expression_statement ')' istart statement_list iend
   21                    | FOR . '(' expression_statement expression_statement expression ')' istart statement_list iend

    '('  shift, and go to state 68


State 31

   22 jump_statement: BREAK . ';'

    ';'  shift, and go to state 69


State 32

   23 jump_statement: RETURN . ';'
   24               | RETURN . expression ';'

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    ';'             shift, and go to state 70
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting         go to state 49
    main_exp         go to state 50
    unary_op         go to state 51
    unary_exp        go to state 52
    mul_div_mod      go to state 53
    plus_minus       go to state 54
    lt_gt_lte_gte    go to state 55
    eq_neq           go to state 56
    and              go to state 57
    or               go to state 58
    andand           go to state 59
    oror             go to state 60
    conditional_exp  go to state 61
    expression       go to state 71


State 33

   10 print: PRINT . '(' type ',' IDENTIFIER ')'

    '('  shift, and go to state 72


State 34

   26 expression_statement: ';' .

    $default  reduce using rule 26 (expression_statement)


State 35

   33 starting: '(' . expression ')'

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting         go to state 49
    main_exp         go to state 50
    unary_op         go to state 51
    unary_exp        go to state 52
    mul_div_mod      go to state 53
    plus_minus       go to state 54
    lt_gt_lte_gte    go to state 55
    eq_neq           go to state 56
    and              go to state 57
    or               go to state 58
    andand           go to state 59
    oror             go to state 60
    conditional_exp  go to state 61
    expression       go to state 73


State 36

   39 unary_op: '+' .

    $default  reduce using rule 39 (unary_op)


State 37

   40 unary_op: '-' .

    $default  reduce using rule 40 (unary_op)


State 38

   41 unary_op: '!' .

    $default  reduce using rule 41 (unary_op)


State 39

   42 unary_op: '*' .

    $default  reduce using rule 42 (unary_op)


State 40

   43 unary_op: '&' .

    $default  reduce using rule 43 (unary_op)


State 41

    9 declaration: type . variables ';'

    IDENTIFIER  shift, and go to state 21

    var        go to state 10
    variables  go to state 11


State 42

   16 statement: declaration .

    $default  reduce using rule 16 (statement)


State 43

   11 myfunction: print . ';'

    ';'  shift, and go to state 74


State 44

   17 statement: myfunction .

    $default  reduce using rule 17 (statement)


State 45

   72 statement_list: statement .

    $default  reduce using rule 72 (statement_list)


State 46

   14 statement: iteration_statement .

    $default  reduce using rule 14 (statement)


State 47

   13 statement: jump_statement .

    $default  reduce using rule 13 (statement)


State 48

   15 statement: expression_statement .

    $default  reduce using rule 15 (statement)


State 49

   34 main_exp: starting .

    $default  reduce using rule 34 (main_exp)


State 50

   44 unary_exp: main_exp .

    $default  reduce using rule 44 (unary_exp)


State 51

   45 unary_exp: unary_op . unary_exp

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting   go to state 49
    main_exp   go to state 50
    unary_op   go to state 51
    unary_exp  go to state 75


State 52

   46 mul_div_mod: unary_exp .
   71 expression: unary_exp . ass_operator expression

    '='  shift, and go to state 76

    $default  reduce using rule 46 (mul_div_mod)

    ass_operator  go to state 77


State 53

   47 mul_div_mod: mul_div_mod . '*' unary_exp
   48            | mul_div_mod . '/' unary_exp
   49            | mul_div_mod . '%' unary_exp
   50 plus_minus: mul_div_mod .

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80

    $default  reduce using rule 50 (plus_minus)


State 54

   51 plus_minus: plus_minus . '+' mul_div_mod
   52           | plus_minus . '-' mul_div_mod
   53 lt_gt_lte_gte: plus_minus .

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82

    $default  reduce using rule 53 (lt_gt_lte_gte)


State 55

   54 lt_gt_lte_gte: lt_gt_lte_gte . '<' plus_minus
   55              | lt_gt_lte_gte . '>' plus_minus
   56              | lt_gt_lte_gte . LE_OP plus_minus
   57              | lt_gt_lte_gte . GE_OP plus_minus
   58 eq_neq: lt_gt_lte_gte .

    LE_OP  shift, and go to state 83
    GE_OP  shift, and go to state 84
    '<'    shift, and go to state 85
    '>'    shift, and go to state 86

    $default  reduce using rule 58 (eq_neq)


State 56

   59 eq_neq: eq_neq . EQ_OP lt_gt_lte_gte
   60       | eq_neq . NE_OP lt_gt_lte_gte
   61 and: eq_neq .

    EQ_OP  shift, and go to state 87
    NE_OP  shift, and go to state 88

    $default  reduce using rule 61 (and)


State 57

   62 and: and . '&' eq_neq
   63 or: and .

    '&'  shift, and go to state 89

    $default  reduce using rule 63 (or)


State 58

   64 or: or . '|' and
   65 andand: or .

    '|'  shift, and go to state 90

    $default  reduce using rule 65 (andand)


State 59

   66 andand: andand . AND_OP or
   67 oror: andand .

    AND_OP  shift, and go to state 91

    $default  reduce using rule 67 (oror)


State 60

   68 oror: oror . OR_OP andand
   69 conditional_exp: oror .

    OR_OP  shift, and go to state 92

    $default  reduce using rule 69 (conditional_exp)


State 61

   70 expression: conditional_exp .

    $default  reduce using rule 70 (expression)


State 62

   27 expression_statement: expression . ';'

    ';'  shift, and go to state 93


State 63

   73 statement_list: statement_list . statement
   76 body: openB statement_list . closeB

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    FOR             shift, and go to state 30
    BREAK           shift, and go to state 31
    RETURN          shift, and go to state 32
    PRINT           shift, and go to state 33
    CHAR            shift, and go to state 1
    INT             shift, and go to state 2
    VOID            shift, and go to state 3
    ';'             shift, and go to state 34
    '('             shift, and go to state 35
    '{'             shift, and go to state 23
    '}'             shift, and go to state 94
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    type                  go to state 41
    declaration           go to state 42
    print                 go to state 43
    myfunction            go to state 44
    statement             go to state 95
    iteration_statement   go to state 46
    jump_statement        go to state 47
    expression_statement  go to state 48
    starting              go to state 49
    main_exp              go to state 50
    unary_op              go to state 51
    unary_exp             go to state 52
    mul_div_mod           go to state 53
    plus_minus            go to state 54
    lt_gt_lte_gte         go to state 55
    eq_neq                go to state 56
    and                   go to state 57
    or                    go to state 58
    andand                go to state 59
    oror                  go to state 60
    conditional_exp       go to state 61
    expression            go to state 62
    openB                 go to state 24
    closeB                go to state 96
    body                  go to state 64


State 64

   12 statement: body .

    $default  reduce using rule 12 (statement)


State 65

    3 var: IDENTIFIER '[' CONSTANT ']' '[' . CONSTANT ']'

    CONSTANT  shift, and go to state 97


State 66

   35 main_exp: IDENTIFIER '[' . expression ']'
   36         | IDENTIFIER '[' . expression ']' '[' expression ']'

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting         go to state 49
    main_exp         go to state 50
    unary_op         go to state 51
    unary_exp        go to state 52
    mul_div_mod      go to state 53
    plus_minus       go to state 54
    lt_gt_lte_gte    go to state 55
    eq_neq           go to state 56
    and              go to state 57
    or               go to state 58
    andand           go to state 59
    oror             go to state 60
    conditional_exp  go to state 61
    expression       go to state 98


State 67

   37 main_exp: IDENTIFIER '(' . ')'
   38         | IDENTIFIER '(' . arg_list ')'

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    ')'             shift, and go to state 99
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    arg_list         go to state 100
    starting         go to state 49
    main_exp         go to state 50
    unary_op         go to state 51
    unary_exp        go to state 52
    mul_div_mod      go to state 53
    plus_minus       go to state 54
    lt_gt_lte_gte    go to state 55
    eq_neq           go to state 56
    and              go to state 57
    or               go to state 58
    andand           go to state 59
    oror             go to state 60
    conditional_exp  go to state 61
    expression       go to state 101


State 68

   20 iteration_statement: FOR '(' . expression_statement expression_statement ')' istart statement_list iend
   21                    | FOR '(' . expression_statement expression_statement expression ')' istart statement_list iend

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    ';'             shift, and go to state 34
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    expression_statement  go to state 102
    starting              go to state 49
    main_exp              go to state 50
    unary_op              go to state 51
    unary_exp             go to state 52
    mul_div_mod           go to state 53
    plus_minus            go to state 54
    lt_gt_lte_gte         go to state 55
    eq_neq                go to state 56
    and                   go to state 57
    or                    go to state 58
    andand                go to state 59
    oror                  go to state 60
    conditional_exp       go to state 61
    expression            go to state 62


State 69

   22 jump_statement: BREAK ';' .

    $default  reduce using rule 22 (jump_statement)


State 70

   23 jump_statement: RETURN ';' .

    $default  reduce using rule 23 (jump_statement)


State 71

   24 jump_statement: RETURN expression . ';'

    ';'  shift, and go to state 103


State 72

   10 print: PRINT '(' . type ',' IDENTIFIER ')'

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    type  go to state 104


State 73

   33 starting: '(' expression . ')'

    ')'  shift, and go to state 105


State 74

   11 myfunction: print ';' .

    $default  reduce using rule 11 (myfunction)


State 75

   45 unary_exp: unary_op unary_exp .

    $default  reduce using rule 45 (unary_exp)


State 76

   25 ass_operator: '=' .

    $default  reduce using rule 25 (ass_operator)


State 77

   71 expression: unary_exp ass_operator . expression

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting         go to state 49
    main_exp         go to state 50
    unary_op         go to state 51
    unary_exp        go to state 52
    mul_div_mod      go to state 53
    plus_minus       go to state 54
    lt_gt_lte_gte    go to state 55
    eq_neq           go to state 56
    and              go to state 57
    or               go to state 58
    andand           go to state 59
    oror             go to state 60
    conditional_exp  go to state 61
    expression       go to state 106


State 78

   47 mul_div_mod: mul_div_mod '*' . unary_exp

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting   go to state 49
    main_exp   go to state 50
    unary_op   go to state 51
    unary_exp  go to state 107


State 79

   48 mul_div_mod: mul_div_mod '/' . unary_exp

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting   go to state 49
    main_exp   go to state 50
    unary_op   go to state 51
    unary_exp  go to state 108


State 80

   49 mul_div_mod: mul_div_mod '%' . unary_exp

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting   go to state 49
    main_exp   go to state 50
    unary_op   go to state 51
    unary_exp  go to state 109


State 81

   51 plus_minus: plus_minus '+' . mul_div_mod

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting     go to state 49
    main_exp     go to state 50
    unary_op     go to state 51
    unary_exp    go to state 110
    mul_div_mod  go to state 111


State 82

   52 plus_minus: plus_minus '-' . mul_div_mod

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting     go to state 49
    main_exp     go to state 50
    unary_op     go to state 51
    unary_exp    go to state 110
    mul_div_mod  go to state 112


State 83

   56 lt_gt_lte_gte: lt_gt_lte_gte LE_OP . plus_minus

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting     go to state 49
    main_exp     go to state 50
    unary_op     go to state 51
    unary_exp    go to state 110
    mul_div_mod  go to state 53
    plus_minus   go to state 113


State 84

   57 lt_gt_lte_gte: lt_gt_lte_gte GE_OP . plus_minus

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting     go to state 49
    main_exp     go to state 50
    unary_op     go to state 51
    unary_exp    go to state 110
    mul_div_mod  go to state 53
    plus_minus   go to state 114


State 85

   54 lt_gt_lte_gte: lt_gt_lte_gte '<' . plus_minus

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting     go to state 49
    main_exp     go to state 50
    unary_op     go to state 51
    unary_exp    go to state 110
    mul_div_mod  go to state 53
    plus_minus   go to state 115


State 86

   55 lt_gt_lte_gte: lt_gt_lte_gte '>' . plus_minus

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting     go to state 49
    main_exp     go to state 50
    unary_op     go to state 51
    unary_exp    go to state 110
    mul_div_mod  go to state 53
    plus_minus   go to state 116


State 87

   59 eq_neq: eq_neq EQ_OP . lt_gt_lte_gte

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting       go to state 49
    main_exp       go to state 50
    unary_op       go to state 51
    unary_exp      go to state 110
    mul_div_mod    go to state 53
    plus_minus     go to state 54
    lt_gt_lte_gte  go to state 117


State 88

   60 eq_neq: eq_neq NE_OP . lt_gt_lte_gte

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting       go to state 49
    main_exp       go to state 50
    unary_op       go to state 51
    unary_exp      go to state 110
    mul_div_mod    go to state 53
    plus_minus     go to state 54
    lt_gt_lte_gte  go to state 118


State 89

   62 and: and '&' . eq_neq

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting       go to state 49
    main_exp       go to state 50
    unary_op       go to state 51
    unary_exp      go to state 110
    mul_div_mod    go to state 53
    plus_minus     go to state 54
    lt_gt_lte_gte  go to state 55
    eq_neq         go to state 119


State 90

   64 or: or '|' . and

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting       go to state 49
    main_exp       go to state 50
    unary_op       go to state 51
    unary_exp      go to state 110
    mul_div_mod    go to state 53
    plus_minus     go to state 54
    lt_gt_lte_gte  go to state 55
    eq_neq         go to state 56
    and            go to state 120


State 91

   66 andand: andand AND_OP . or

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting       go to state 49
    main_exp       go to state 50
    unary_op       go to state 51
    unary_exp      go to state 110
    mul_div_mod    go to state 53
    plus_minus     go to state 54
    lt_gt_lte_gte  go to state 55
    eq_neq         go to state 56
    and            go to state 57
    or             go to state 121


State 92

   68 oror: oror OR_OP . andand

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting       go to state 49
    main_exp       go to state 50
    unary_op       go to state 51
    unary_exp      go to state 110
    mul_div_mod    go to state 53
    plus_minus     go to state 54
    lt_gt_lte_gte  go to state 55
    eq_neq         go to state 56
    and            go to state 57
    or             go to state 58
    andand         go to state 122


State 93

   27 expression_statement: expression ';' .

    $default  reduce using rule 27 (expression_statement)


State 94

   75 closeB: '}' .

    $default  reduce using rule 75 (closeB)


State 95

   73 statement_list: statement_list statement .

    $default  reduce using rule 73 (statement_list)


State 96

   76 body: openB statement_list closeB .

    $default  reduce using rule 76 (body)


State 97

    3 var: IDENTIFIER '[' CONSTANT ']' '[' CONSTANT . ']'

    ']'  shift, and go to state 123


State 98

   35 main_exp: IDENTIFIER '[' expression . ']'
   36         | IDENTIFIER '[' expression . ']' '[' expression ']'

    ']'  shift, and go to state 124


State 99

   37 main_exp: IDENTIFIER '(' ')' .

    $default  reduce using rule 37 (main_exp)


State 100

   29 arg_list: arg_list . ',' expression
   38 main_exp: IDENTIFIER '(' arg_list . ')'

    ','  shift, and go to state 125
    ')'  shift, and go to state 126


State 101

   28 arg_list: expression .

    $default  reduce using rule 28 (arg_list)


State 102

   20 iteration_statement: FOR '(' expression_statement . expression_statement ')' istart statement_list iend
   21                    | FOR '(' expression_statement . expression_statement expression ')' istart statement_list iend

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    ';'             shift, and go to state 34
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    expression_statement  go to state 127
    starting              go to state 49
    main_exp              go to state 50
    unary_op              go to state 51
    unary_exp             go to state 52
    mul_div_mod           go to state 53
    plus_minus            go to state 54
    lt_gt_lte_gte         go to state 55
    eq_neq                go to state 56
    and                   go to state 57
    or                    go to state 58
    andand                go to state 59
    oror                  go to state 60
    conditional_exp       go to state 61
    expression            go to state 62


State 103

   24 jump_statement: RETURN expression ';' .

    $default  reduce using rule 24 (jump_statement)


State 104

   10 print: PRINT '(' type . ',' IDENTIFIER ')'

    ','  shift, and go to state 128


State 105

   33 starting: '(' expression ')' .

    $default  reduce using rule 33 (starting)


State 106

   71 expression: unary_exp ass_operator expression .

    $default  reduce using rule 71 (expression)


State 107

   47 mul_div_mod: mul_div_mod '*' unary_exp .

    $default  reduce using rule 47 (mul_div_mod)


State 108

   48 mul_div_mod: mul_div_mod '/' unary_exp .

    $default  reduce using rule 48 (mul_div_mod)


State 109

   49 mul_div_mod: mul_div_mod '%' unary_exp .

    $default  reduce using rule 49 (mul_div_mod)


State 110

   46 mul_div_mod: unary_exp .

    $default  reduce using rule 46 (mul_div_mod)


State 111

   47 mul_div_mod: mul_div_mod . '*' unary_exp
   48            | mul_div_mod . '/' unary_exp
   49            | mul_div_mod . '%' unary_exp
   51 plus_minus: plus_minus '+' mul_div_mod .

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80

    $default  reduce using rule 51 (plus_minus)


State 112

   47 mul_div_mod: mul_div_mod . '*' unary_exp
   48            | mul_div_mod . '/' unary_exp
   49            | mul_div_mod . '%' unary_exp
   52 plus_minus: plus_minus '-' mul_div_mod .

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79
    '%'  shift, and go to state 80

    $default  reduce using rule 52 (plus_minus)


State 113

   51 plus_minus: plus_minus . '+' mul_div_mod
   52           | plus_minus . '-' mul_div_mod
   56 lt_gt_lte_gte: lt_gt_lte_gte LE_OP plus_minus .

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82

    $default  reduce using rule 56 (lt_gt_lte_gte)


State 114

   51 plus_minus: plus_minus . '+' mul_div_mod
   52           | plus_minus . '-' mul_div_mod
   57 lt_gt_lte_gte: lt_gt_lte_gte GE_OP plus_minus .

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82

    $default  reduce using rule 57 (lt_gt_lte_gte)


State 115

   51 plus_minus: plus_minus . '+' mul_div_mod
   52           | plus_minus . '-' mul_div_mod
   54 lt_gt_lte_gte: lt_gt_lte_gte '<' plus_minus .

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82

    $default  reduce using rule 54 (lt_gt_lte_gte)


State 116

   51 plus_minus: plus_minus . '+' mul_div_mod
   52           | plus_minus . '-' mul_div_mod
   55 lt_gt_lte_gte: lt_gt_lte_gte '>' plus_minus .

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82

    $default  reduce using rule 55 (lt_gt_lte_gte)


State 117

   54 lt_gt_lte_gte: lt_gt_lte_gte . '<' plus_minus
   55              | lt_gt_lte_gte . '>' plus_minus
   56              | lt_gt_lte_gte . LE_OP plus_minus
   57              | lt_gt_lte_gte . GE_OP plus_minus
   59 eq_neq: eq_neq EQ_OP lt_gt_lte_gte .

    LE_OP  shift, and go to state 83
    GE_OP  shift, and go to state 84
    '<'    shift, and go to state 85
    '>'    shift, and go to state 86

    $default  reduce using rule 59 (eq_neq)


State 118

   54 lt_gt_lte_gte: lt_gt_lte_gte . '<' plus_minus
   55              | lt_gt_lte_gte . '>' plus_minus
   56              | lt_gt_lte_gte . LE_OP plus_minus
   57              | lt_gt_lte_gte . GE_OP plus_minus
   60 eq_neq: eq_neq NE_OP lt_gt_lte_gte .

    LE_OP  shift, and go to state 83
    GE_OP  shift, and go to state 84
    '<'    shift, and go to state 85
    '>'    shift, and go to state 86

    $default  reduce using rule 60 (eq_neq)


State 119

   59 eq_neq: eq_neq . EQ_OP lt_gt_lte_gte
   60       | eq_neq . NE_OP lt_gt_lte_gte
   62 and: and '&' eq_neq .

    EQ_OP  shift, and go to state 87
    NE_OP  shift, and go to state 88

    $default  reduce using rule 62 (and)


State 120

   62 and: and . '&' eq_neq
   64 or: or '|' and .

    '&'  shift, and go to state 89

    $default  reduce using rule 64 (or)


State 121

   64 or: or . '|' and
   66 andand: andand AND_OP or .

    '|'  shift, and go to state 90

    $default  reduce using rule 66 (andand)


State 122

   66 andand: andand . AND_OP or
   68 oror: oror OR_OP andand .

    AND_OP  shift, and go to state 91

    $default  reduce using rule 68 (oror)


State 123

    3 var: IDENTIFIER '[' CONSTANT ']' '[' CONSTANT ']' .

    $default  reduce using rule 3 (var)


State 124

   35 main_exp: IDENTIFIER '[' expression ']' .
   36         | IDENTIFIER '[' expression ']' . '[' expression ']'

    '['  shift, and go to state 129

    $default  reduce using rule 35 (main_exp)


State 125

   29 arg_list: arg_list ',' . expression

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting         go to state 49
    main_exp         go to state 50
    unary_op         go to state 51
    unary_exp        go to state 52
    mul_div_mod      go to state 53
    plus_minus       go to state 54
    lt_gt_lte_gte    go to state 55
    eq_neq           go to state 56
    and              go to state 57
    or               go to state 58
    andand           go to state 59
    oror             go to state 60
    conditional_exp  go to state 61
    expression       go to state 130


State 126

   38 main_exp: IDENTIFIER '(' arg_list ')' .

    $default  reduce using rule 38 (main_exp)


State 127

   20 iteration_statement: FOR '(' expression_statement expression_statement . ')' istart statement_list iend
   21                    | FOR '(' expression_statement expression_statement . expression ')' istart statement_list iend

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    ')'             shift, and go to state 131
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting         go to state 49
    main_exp         go to state 50
    unary_op         go to state 51
    unary_exp        go to state 52
    mul_div_mod      go to state 53
    plus_minus       go to state 54
    lt_gt_lte_gte    go to state 55
    eq_neq           go to state 56
    and              go to state 57
    or               go to state 58
    andand           go to state 59
    oror             go to state 60
    conditional_exp  go to state 61
    expression       go to state 132


State 128

   10 print: PRINT '(' type ',' . IDENTIFIER ')'

    IDENTIFIER  shift, and go to state 133


State 129

   36 main_exp: IDENTIFIER '[' expression ']' '[' . expression ']'

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    '('             shift, and go to state 35
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    starting         go to state 49
    main_exp         go to state 50
    unary_op         go to state 51
    unary_exp        go to state 52
    mul_div_mod      go to state 53
    plus_minus       go to state 54
    lt_gt_lte_gte    go to state 55
    eq_neq           go to state 56
    and              go to state 57
    or               go to state 58
    andand           go to state 59
    oror             go to state 60
    conditional_exp  go to state 61
    expression       go to state 134


State 130

   29 arg_list: arg_list ',' expression .

    $default  reduce using rule 29 (arg_list)


State 131

   20 iteration_statement: FOR '(' expression_statement expression_statement ')' . istart statement_list iend

    '{'  shift, and go to state 135

    istart  go to state 136


State 132

   21 iteration_statement: FOR '(' expression_statement expression_statement expression . ')' istart statement_list iend

    ')'  shift, and go to state 137


State 133

   10 print: PRINT '(' type ',' IDENTIFIER . ')'

    ')'  shift, and go to state 138


State 134

   36 main_exp: IDENTIFIER '[' expression ']' '[' expression . ']'

    ']'  shift, and go to state 139


State 135

   18 istart: '{' .

    $default  reduce using rule 18 (istart)


State 136

   20 iteration_statement: FOR '(' expression_statement expression_statement ')' istart . statement_list iend

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    FOR             shift, and go to state 30
    BREAK           shift, and go to state 31
    RETURN          shift, and go to state 32
    PRINT           shift, and go to state 33
    CHAR            shift, and go to state 1
    INT             shift, and go to state 2
    VOID            shift, and go to state 3
    ';'             shift, and go to state 34
    '('             shift, and go to state 35
    '{'             shift, and go to state 23
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    type                  go to state 41
    declaration           go to state 42
    print                 go to state 43
    myfunction            go to state 44
    statement             go to state 45
    iteration_statement   go to state 46
    jump_statement        go to state 47
    expression_statement  go to state 48
    starting              go to state 49
    main_exp              go to state 50
    unary_op              go to state 51
    unary_exp             go to state 52
    mul_div_mod           go to state 53
    plus_minus            go to state 54
    lt_gt_lte_gte         go to state 55
    eq_neq                go to state 56
    and                   go to state 57
    or                    go to state 58
    andand                go to state 59
    oror                  go to state 60
    conditional_exp       go to state 61
    expression            go to state 62
    statement_list        go to state 140
    openB                 go to state 24
    body                  go to state 64


State 137

   21 iteration_statement: FOR '(' expression_statement expression_statement expression ')' . istart statement_list iend

    '{'  shift, and go to state 135

    istart  go to state 141


State 138

   10 print: PRINT '(' type ',' IDENTIFIER ')' .

    $default  reduce using rule 10 (print)


State 139

   36 main_exp: IDENTIFIER '[' expression ']' '[' expression ']' .

    $default  reduce using rule 36 (main_exp)


State 140

   20 iteration_statement: FOR '(' expression_statement expression_statement ')' istart statement_list . iend
   73 statement_list: statement_list . statement

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    FOR             shift, and go to state 30
    BREAK           shift, and go to state 31
    RETURN          shift, and go to state 32
    PRINT           shift, and go to state 33
    CHAR            shift, and go to state 1
    INT             shift, and go to state 2
    VOID            shift, and go to state 3
    ';'             shift, and go to state 34
    '('             shift, and go to state 35
    '{'             shift, and go to state 23
    '}'             shift, and go to state 142
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    type                  go to state 41
    declaration           go to state 42
    print                 go to state 43
    myfunction            go to state 44
    statement             go to state 95
    iend                  go to state 143
    iteration_statement   go to state 46
    jump_statement        go to state 47
    expression_statement  go to state 48
    starting              go to state 49
    main_exp              go to state 50
    unary_op              go to state 51
    unary_exp             go to state 52
    mul_div_mod           go to state 53
    plus_minus            go to state 54
    lt_gt_lte_gte         go to state 55
    eq_neq                go to state 56
    and                   go to state 57
    or                    go to state 58
    andand                go to state 59
    oror                  go to state 60
    conditional_exp       go to state 61
    expression            go to state 62
    openB                 go to state 24
    body                  go to state 64


State 141

   21 iteration_statement: FOR '(' expression_statement expression_statement expression ')' istart . statement_list iend

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    FOR             shift, and go to state 30
    BREAK           shift, and go to state 31
    RETURN          shift, and go to state 32
    PRINT           shift, and go to state 33
    CHAR            shift, and go to state 1
    INT             shift, and go to state 2
    VOID            shift, and go to state 3
    ';'             shift, and go to state 34
    '('             shift, and go to state 35
    '{'             shift, and go to state 23
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    type                  go to state 41
    declaration           go to state 42
    print                 go to state 43
    myfunction            go to state 44
    statement             go to state 45
    iteration_statement   go to state 46
    jump_statement        go to state 47
    expression_statement  go to state 48
    starting              go to state 49
    main_exp              go to state 50
    unary_op              go to state 51
    unary_exp             go to state 52
    mul_div_mod           go to state 53
    plus_minus            go to state 54
    lt_gt_lte_gte         go to state 55
    eq_neq                go to state 56
    and                   go to state 57
    or                    go to state 58
    andand                go to state 59
    oror                  go to state 60
    conditional_exp       go to state 61
    expression            go to state 62
    statement_list        go to state 144
    openB                 go to state 24
    body                  go to state 64


State 142

   19 iend: '}' .

    $default  reduce using rule 19 (iend)


State 143

   20 iteration_statement: FOR '(' expression_statement expression_statement ')' istart statement_list iend .

    $default  reduce using rule 20 (iteration_statement)


State 144

   21 iteration_statement: FOR '(' expression_statement expression_statement expression ')' istart statement_list . iend
   73 statement_list: statement_list . statement

    IDENTIFIER      shift, and go to state 27
    CONSTANT        shift, and go to state 28
    STRING_LITERAL  shift, and go to state 29
    FOR             shift, and go to state 30
    BREAK           shift, and go to state 31
    RETURN          shift, and go to state 32
    PRINT           shift, and go to state 33
    CHAR            shift, and go to state 1
    INT             shift, and go to state 2
    VOID            shift, and go to state 3
    ';'             shift, and go to state 34
    '('             shift, and go to state 35
    '{'             shift, and go to state 23
    '}'             shift, and go to state 142
    '+'             shift, and go to state 36
    '-'             shift, and go to state 37
    '!'             shift, and go to state 38
    '*'             shift, and go to state 39
    '&'             shift, and go to state 40

    type                  go to state 41
    declaration           go to state 42
    print                 go to state 43
    myfunction            go to state 44
    statement             go to state 95
    iend                  go to state 145
    iteration_statement   go to state 46
    jump_statement        go to state 47
    expression_statement  go to state 48
    starting              go to state 49
    main_exp              go to state 50
    unary_op              go to state 51
    unary_exp             go to state 52
    mul_div_mod           go to state 53
    plus_minus            go to state 54
    lt_gt_lte_gte         go to state 55
    eq_neq                go to state 56
    and                   go to state 57
    or                    go to state 58
    andand                go to state 59
    oror                  go to state 60
    conditional_exp       go to state 61
    expression            go to state 62
    openB                 go to state 24
    body                  go to state 64


State 145

   21 iteration_statement: FOR '(' expression_statement expression_statement expression ')' istart statement_list iend .

    $default  reduce using rule 21 (iteration_statement)
