Grammar

    0 $accept: stmt $end

    1 stmt: types

    2 types: label types
    3      | assign types
    4      | goto types
    5      | if types
    6      | END

    7 label: LABEL ':'

    8 $@1: %empty

    9 assign: oper EQ $@1 exp

   10 if: IF '(' NOT exp ')' GOTO LABEL
   11   | IF '(' exp NEQ exp ')' GOTO LABEL

   12 goto: GOTO LABEL

   13 exp: logical
   14    | oper '+' oper
   15    | oper '-' oper
   16    | oper '*' oper
   17    | oper '/' oper
   18    | oper '%' oper

   19 logical: unary
   20        | oper LE oper
   21        | oper GE oper
   22        | oper OR oper
   23        | oper AND oper
   24        | oper '<' oper
   25        | oper '>' oper

   26 unary: oper
   27      | BOOL oper

   28 oper: ID
   29     | NUM
   30     | TEMP


Terminals, with rules where they appear

$end (0) 0
'%' (37) 18
'(' (40) 10 11
')' (41) 10 11
'*' (42) 16
'+' (43) 14
'-' (45) 15
'/' (47) 17
':' (58) 7
'<' (60) 24
'>' (62) 25
error (256)
GOTO (258) 10 11 12
IF (259) 10 11
NOT (260) 10
END (261) 6
LABEL (262) 7 10 11 12
EQ (263) 9
AND (264) 23
OR (265) 22
LE (266) 20
GE (267) 21
BOOL (268) 27
NEQ (269) 11
ID (270) 28
TEMP (271) 30
NUM (272) 29


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
stmt (29)
    on left: 1, on right: 0
types (30)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
label (31)
    on left: 7, on right: 2
assign (32)
    on left: 9, on right: 3
$@1 (33)
    on left: 8, on right: 9
if (34)
    on left: 10 11, on right: 5
goto (35)
    on left: 12, on right: 4
exp (36)
    on left: 13 14 15 16 17 18, on right: 9 10 11
logical (37)
    on left: 19 20 21 22 23 24 25, on right: 13
unary (38)
    on left: 26 27, on right: 19
oper (39)
    on left: 28 29 30, on right: 9 14 15 16 17 18 20 21 22 23 24 25
    26 27


State 0

    0 $accept: . stmt $end

    GOTO   shift, and go to state 1
    IF     shift, and go to state 2
    END    shift, and go to state 3
    LABEL  shift, and go to state 4
    ID     shift, and go to state 5
    TEMP   shift, and go to state 6
    NUM    shift, and go to state 7

    stmt    go to state 8
    types   go to state 9
    label   go to state 10
    assign  go to state 11
    if      go to state 12
    goto    go to state 13
    oper    go to state 14


State 1

   12 goto: GOTO . LABEL

    LABEL  shift, and go to state 15


State 2

   10 if: IF . '(' NOT exp ')' GOTO LABEL
   11   | IF . '(' exp NEQ exp ')' GOTO LABEL

    '('  shift, and go to state 16


State 3

    6 types: END .

    $default  reduce using rule 6 (types)


State 4

    7 label: LABEL . ':'

    ':'  shift, and go to state 17


State 5

   28 oper: ID .

    $default  reduce using rule 28 (oper)


State 6

   30 oper: TEMP .

    $default  reduce using rule 30 (oper)


State 7

   29 oper: NUM .

    $default  reduce using rule 29 (oper)


State 8

    0 $accept: stmt . $end

    $end  shift, and go to state 18


State 9

    1 stmt: types .

    $default  reduce using rule 1 (stmt)


State 10

    2 types: label . types

    GOTO   shift, and go to state 1
    IF     shift, and go to state 2
    END    shift, and go to state 3
    LABEL  shift, and go to state 4
    ID     shift, and go to state 5
    TEMP   shift, and go to state 6
    NUM    shift, and go to state 7

    types   go to state 19
    label   go to state 10
    assign  go to state 11
    if      go to state 12
    goto    go to state 13
    oper    go to state 14


State 11

    3 types: assign . types

    GOTO   shift, and go to state 1
    IF     shift, and go to state 2
    END    shift, and go to state 3
    LABEL  shift, and go to state 4
    ID     shift, and go to state 5
    TEMP   shift, and go to state 6
    NUM    shift, and go to state 7

    types   go to state 20
    label   go to state 10
    assign  go to state 11
    if      go to state 12
    goto    go to state 13
    oper    go to state 14


State 12

    5 types: if . types

    GOTO   shift, and go to state 1
    IF     shift, and go to state 2
    END    shift, and go to state 3
    LABEL  shift, and go to state 4
    ID     shift, and go to state 5
    TEMP   shift, and go to state 6
    NUM    shift, and go to state 7

    types   go to state 21
    label   go to state 10
    assign  go to state 11
    if      go to state 12
    goto    go to state 13
    oper    go to state 14


State 13

    4 types: goto . types

    GOTO   shift, and go to state 1
    IF     shift, and go to state 2
    END    shift, and go to state 3
    LABEL  shift, and go to state 4
    ID     shift, and go to state 5
    TEMP   shift, and go to state 6
    NUM    shift, and go to state 7

    types   go to state 22
    label   go to state 10
    assign  go to state 11
    if      go to state 12
    goto    go to state 13
    oper    go to state 14


State 14

    9 assign: oper . EQ $@1 exp

    EQ  shift, and go to state 23


State 15

   12 goto: GOTO LABEL .

    $default  reduce using rule 12 (goto)


State 16

   10 if: IF '(' . NOT exp ')' GOTO LABEL
   11   | IF '(' . exp NEQ exp ')' GOTO LABEL

    NOT   shift, and go to state 24
    BOOL  shift, and go to state 25
    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    exp      go to state 26
    logical  go to state 27
    unary    go to state 28
    oper     go to state 29


State 17

    7 label: LABEL ':' .

    $default  reduce using rule 7 (label)


State 18

    0 $accept: stmt $end .

    $default  accept


State 19

    2 types: label types .

    $default  reduce using rule 2 (types)


State 20

    3 types: assign types .

    $default  reduce using rule 3 (types)


State 21

    5 types: if types .

    $default  reduce using rule 5 (types)


State 22

    4 types: goto types .

    $default  reduce using rule 4 (types)


State 23

    9 assign: oper EQ . $@1 exp

    $default  reduce using rule 8 ($@1)

    $@1  go to state 30


State 24

   10 if: IF '(' NOT . exp ')' GOTO LABEL

    BOOL  shift, and go to state 25
    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    exp      go to state 31
    logical  go to state 27
    unary    go to state 28
    oper     go to state 29


State 25

   27 unary: BOOL . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 32


State 26

   11 if: IF '(' exp . NEQ exp ')' GOTO LABEL

    NEQ  shift, and go to state 33


State 27

   13 exp: logical .

    $default  reduce using rule 13 (exp)


State 28

   19 logical: unary .

    $default  reduce using rule 19 (logical)


State 29

   14 exp: oper . '+' oper
   15    | oper . '-' oper
   16    | oper . '*' oper
   17    | oper . '/' oper
   18    | oper . '%' oper
   20 logical: oper . LE oper
   21        | oper . GE oper
   22        | oper . OR oper
   23        | oper . AND oper
   24        | oper . '<' oper
   25        | oper . '>' oper
   26 unary: oper .

    AND  shift, and go to state 34
    OR   shift, and go to state 35
    LE   shift, and go to state 36
    GE   shift, and go to state 37
    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    '%'  shift, and go to state 42
    '<'  shift, and go to state 43
    '>'  shift, and go to state 44

    $default  reduce using rule 26 (unary)


State 30

    9 assign: oper EQ $@1 . exp

    BOOL  shift, and go to state 25
    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    exp      go to state 45
    logical  go to state 27
    unary    go to state 28
    oper     go to state 29


State 31

   10 if: IF '(' NOT exp . ')' GOTO LABEL

    ')'  shift, and go to state 46


State 32

   27 unary: BOOL oper .

    $default  reduce using rule 27 (unary)


State 33

   11 if: IF '(' exp NEQ . exp ')' GOTO LABEL

    BOOL  shift, and go to state 25
    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    exp      go to state 47
    logical  go to state 27
    unary    go to state 28
    oper     go to state 29


State 34

   23 logical: oper AND . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 48


State 35

   22 logical: oper OR . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 49


State 36

   20 logical: oper LE . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 50


State 37

   21 logical: oper GE . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 51


State 38

   14 exp: oper '+' . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 52


State 39

   15 exp: oper '-' . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 53


State 40

   16 exp: oper '*' . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 54


State 41

   17 exp: oper '/' . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 55


State 42

   18 exp: oper '%' . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 56


State 43

   24 logical: oper '<' . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 57


State 44

   25 logical: oper '>' . oper

    ID    shift, and go to state 5
    TEMP  shift, and go to state 6
    NUM   shift, and go to state 7

    oper  go to state 58


State 45

    9 assign: oper EQ $@1 exp .

    $default  reduce using rule 9 (assign)


State 46

   10 if: IF '(' NOT exp ')' . GOTO LABEL

    GOTO  shift, and go to state 59


State 47

   11 if: IF '(' exp NEQ exp . ')' GOTO LABEL

    ')'  shift, and go to state 60


State 48

   23 logical: oper AND oper .

    $default  reduce using rule 23 (logical)


State 49

   22 logical: oper OR oper .

    $default  reduce using rule 22 (logical)


State 50

   20 logical: oper LE oper .

    $default  reduce using rule 20 (logical)


State 51

   21 logical: oper GE oper .

    $default  reduce using rule 21 (logical)


State 52

   14 exp: oper '+' oper .

    $default  reduce using rule 14 (exp)


State 53

   15 exp: oper '-' oper .

    $default  reduce using rule 15 (exp)


State 54

   16 exp: oper '*' oper .

    $default  reduce using rule 16 (exp)


State 55

   17 exp: oper '/' oper .

    $default  reduce using rule 17 (exp)


State 56

   18 exp: oper '%' oper .

    $default  reduce using rule 18 (exp)


State 57

   24 logical: oper '<' oper .

    $default  reduce using rule 24 (logical)


State 58

   25 logical: oper '>' oper .

    $default  reduce using rule 25 (logical)


State 59

   10 if: IF '(' NOT exp ')' GOTO . LABEL

    LABEL  shift, and go to state 61


State 60

   11 if: IF '(' exp NEQ exp ')' . GOTO LABEL

    GOTO  shift, and go to state 62


State 61

   10 if: IF '(' NOT exp ')' GOTO LABEL .

    $default  reduce using rule 10 (if)


State 62

   11 if: IF '(' exp NEQ exp ')' GOTO . LABEL

    LABEL  shift, and go to state 63


State 63

   11 if: IF '(' exp NEQ exp ')' GOTO LABEL .

    $default  reduce using rule 11 (if)
